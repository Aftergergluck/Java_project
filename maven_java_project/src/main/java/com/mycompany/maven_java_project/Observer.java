/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.maven_java_project;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Florian
 */
public class Observer extends javax.swing.JFrame {

    /**
     * Creates new form Observer
     */
    public Observer() {
        initComponents();
        Controleur ctrl = new Controleur();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitreObs = new javax.swing.JLabel();
        jLabelObservation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Observation du réseau");

        jLabelTitreObs.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabelTitreObs.setText("Observer le réseau");

        jLabelObservation.setText(observerReseauLabel());
        jLabelObservation.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabelTitreObs)
                .addContainerGap(172, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelObservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitreObs)
                .addGap(34, 34, 34)
                .addComponent(jLabelObservation, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Observer().setVisible(true);
            }
        });
    }
    
    public String afficherLocaux(String text) {
        // Obtenir la liste des locaux
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomLocal FROM Local");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des locaux et les ajouter au texte
            while (res.next()) {
                text += res.getString(1)+"\n";
                text = afficherSalles(text);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }
    
    public String afficherSalles(String text) {
        // Obtenir la liste des salles
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomSalle FROM Salle");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des salles et les ajouter au texte
            while (res.next()) {
                text += "   "+res.getString(1)+"\n";
                text = afficherAppareil(text);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }
    
    public String afficherAppareil(String text) {
        // Obtenir la liste des appareils
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomApp FROM Appareil");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des locaux et les ajouter au texte
            while (res.next()) {
                text += "       "+res.getString(1)+"\n";
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }
   
    
    private String observerReseauLabel(){
        String chaine = "<html>";
        Controleur ctrl = new Controleur();
        int i = 0;
        int j =0;
        int k = 0;
        BDD bd = new BDD();
        bd.connect();
        List<Local> listLocal = ctrl.getListeLocaux();
        List<Salle> listSalles = ctrl.getListeSalles();
        List<Appareil> listApp = ctrl.getListeApp();
        while (i < listLocal.size()) {
            chaine += "<br><b>"+listLocal.get(i).getNomLocal()+"     (Nombre de Salle = "+listLocal.get(i).getListeSalle().size()+"  )</b><br>";
            while (j < listLocal.get(i).getListeSalle().size()) {
                List<Appareil> a = listSalles.get(ctrl.chercherNomListeSalle(listLocal.get(i).getListeSalle().get(j).getNomSalle())).getListeApp();
                int actif = 0;
                int inactif = 0;
                for (int l = 0; l < a.size(); l++) {
                    System.out.println(a.get(l).getActif());
                    if ("t".equals(a.get(l).getActif())) {
                        actif++;
                    }
                    else{
                        inactif++;
                    }
                    
                }
                chaine +="&nbsp;&nbsp;&nbsp;&nbsp;<i>"+ listLocal.get(i).getListeSalle().get(j).getNomSalle()+"     (Nombre d'appareils actifs = " +actif+" / inactifs = "+inactif+"  )</i><br>";
                while (k < a.size()) {
                    try {
                        bd.select("SELECT adrmacappareil FROM carte_reseau WHERE nomapp ='"+a.get(k).getNomApp()+"'");
                        ResultSet r = bd.getResults();
                        r.next();
                        chaine += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ a.get(k).getNomApp()+ " &nbsp;&nbsp;&nbsp;&nbsp;(Type = " +a.get(k).getTypeApp()+"; @MAC = '" +r.getString(1)+"';   OS = " +a.get(k).getSystEx()+ ";   Firmware = " +a.get(k).getFirmware()+")<br>";
                        k++;
                    } catch (SQLException ex) {
                        Logger.getLogger(Observer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                k = 0;
                j++;
            }
            j = 0;
            i++;
        }
        
        chaine += "</html>";
        return chaine;
    }
    

    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelObservation;
    private javax.swing.JLabel jLabelTitreObs;
    // End of variables declaration//GEN-END:variables
}
