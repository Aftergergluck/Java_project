/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.maven_java_project;

import java.awt.FlowLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author Florian
 */
public class Observer extends javax.swing.JFrame {

    /**
     * Creates new form Observer
     */
    public Observer() {
        initComponents();
        Controleur ctrl = new Controleur();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitreObs = new javax.swing.JLabel();
        jLabelObservation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Observation du réseau");

        jLabelTitreObs.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabelTitreObs.setText("Observer le réseau");

        jLabelObservation.setText(observerReseauLabel());
        jLabelObservation.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabelTitreObs)
                .addContainerGap(172, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelObservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitreObs)
                .addGap(34, 34, 34)
                .addComponent(jLabelObservation, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Observer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Observer().setVisible(true);
            }
        });
    }
    
    public String afficherLocaux(String text) {
        // Obtenir la liste des locaux
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomLocal FROM Local");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des locaux et les ajouter au texte
            while (res.next()) {
                text += res.getString(1)+"\n";
                text = afficherSalles(text);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }
    
    public String afficherSalles(String text) {
        // Obtenir la liste des salles
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomSalle FROM Salle");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des salles et les ajouter au texte
            while (res.next()) {
                text += "   "+res.getString(1)+"\n";
                text = afficherAppareil(text);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }
    
    public String afficherAppareil(String text) {
        // Obtenir la liste des appareils
        try {
            BDD bdd = new BDD();
            bdd.connect();
            bdd.select("SELECT nomApp FROM Appareil");
            ResultSet res = bdd.getResults();
            
            // Parcourir la liste des locaux et les ajouter au texte
            while (res.next()) {
                text += "       "+res.getString(1)+"\n";
            }
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Renvoyer le texte modifié
        return text;
    }

    /*private String observerReseauLabel(){
    String chaine = "<html>";
        try {
            // TODO add your handling code here:
            BDD bd = new BDD();
            bd.connect();
            bd.select("SELECT nomLocal FROM Local");
            ResultSet resultatsL = bd.getResults();
            String[] locaux = new String[100];
            String[] Salle = new String[100];
            String[] App = new String[100];
            int cptl = 0;
            int cptS = 0;
            int cptA = 0;
            String req;
            while(resultatsL.next())
            {
                locaux[cptl] = resultatsL.getString(1);
                req = "SELECT nomSalle FROM Salle WHERE lieuSalle = '" +locaux[cptl]+"';";
                bd.select(req);
                ResultSet resultS = bd.getResults();
                bd.select("Select COUNT(nomSalle) From Salle Where lieuSalle = '" +resultatsL.getString(1)+"'");
                ResultSet count = bd.getResults();
                count.next();
                int nb = count.getInt(1);
                Salle[cptS] = locaux[cptl];
                cptS++;
                chaine += "<br><b>"+locaux[cptl]+"     (Nombre de Salle = "+nb+"  )</b><br>";
                while(resultS.next()){
                    Salle[cptS] = resultS.getString(1);
                    bd.select("Select COUNT(nomapp) From Appareil Where lieuappareil = '" +resultS.getString(1)+"' and active='true';");
                    count = bd.getResults();
                    count.next();
                    nb = count.getInt(1);
                    chaine +="&nbsp;&nbsp;&nbsp;&nbsp;<i>"+ Salle[cptS]+"     (Nombre d'appareils actifs = " +nb+"  )</i><br>";
                    req = "SELECT * From Appareil WHERE lieuappareil = '" +Salle[cptS]+"' AND active = 'true';";
                    Salle[cptS] = "     ".concat(Salle[cptS]);
                    bd.select(req);
                    ResultSet resultA = bd.getResults();
                    App[cptA] = locaux[cptl];
                    cptA++; 
                    App[cptA] = Salle[cptS];
                    cptA++;
                    cptS++;
                    while(resultA.next()){
                        App[cptA] = "         ".concat(resultA.getString(1));
                        bd.select("SELECT adrmacappareil FROM carte_reseau WHERE nomapp = '" +resultA.getString(1)+ "';");
                        ResultSet adr = bd.getResults();
                        String adrMac = "";
                        while(adr.next()){
                            adrMac = adr.getString(1);
                        }
                        if("     Routeur".equals(resultA.getString(2)))
                        {
                            chaine += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ App[cptA]+ " &nbsp;&nbsp;&nbsp;&nbsp;(Type = " +resultA.getString(2)+";   @MAC = "+adrMac+";   Firmware = " +resultA.getString(4)+")<br>";                            
                        }
                        else{
                            chaine += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ App[cptA]+ " &nbsp;&nbsp;&nbsp;&nbsp;(Type = " +resultA.getString(2)+";   @MAC = " +adrMac +";   OS = " +resultA.getString(3)+ ";   Firmware = " +resultA.getString(4)+")<br>";                            
                        }
                        cptA++;
                        
                    }
                    chaine += "<br>";
                }
                cptl++;
            }

           
            
        } catch (SQLException ex) {
            Logger.getLogger(Ajouter.class.getName()).log(Level.SEVERE, null, ex);
        }
        chaine += "</html>";
        return chaine;
        
        
        
        
    }*/
    
    
    private String observerReseauLabel(){
        String chaine = "<html>";
        Controleur ctrl = new Controleur();
        
                int i = 0;
        int j =0;
        int k = 0;
        int idx = 0;
        
        List<Local> listLocal = ctrl.getListeLocaux();
        List<Salle> listSalles = ctrl.getListeSalles();
        String[] item = new String[listLocal.size()+ctrl.getListeSalles().size()+ctrl.getListeApp().size()];
        while (i < listLocal.size()) {
            item[idx] = listLocal.get(i).getNomLocal();
            idx++;
            while (j < listLocal.get(i).getListeSalle().size()) {
                item[idx] = "     ".concat(listLocal.get(i).getListeSalle().get(j).getNomSalle());
                idx++;
                while (k < listSalles.get(ctrl.chercherNomListeSalle(listLocal.get(i).getListeSalle().get(j).getNomSalle())).getListeApp().size()) {
                    item[idx] = "         ".concat(listSalles.get(ctrl.chercherNomListeSalle(listLocal.get(i).getListeSalle().get(j).getNomSalle())).getListeApp().get(k).getNomApp()); // C'est du génie !!!!
                    idx++;
                    k++;
                }
                k = 0;
                j++;
            }
            j = 0;
            i++;
        }
        
        chaine += "</html>";
        return chaine;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelObservation;
    private javax.swing.JLabel jLabelTitreObs;
    // End of variables declaration//GEN-END:variables
}
